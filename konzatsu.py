#!/usr/bin/python3

# 福岡市地下鉄の「ラッシュ時の社内混雑状況の公表について」の前日のデータを取得し，CSVデータ化するプログラム。
# 2020/03/09以降のデータに対応している。

import argparse
import re
import sys
import urllib.parse
import urllib.request
from datetime import datetime, date, timedelta
from pdfrw import PdfReader


urls = (
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD空港線東行朝.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD空港線東行夕.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD空港線西行朝.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD空港線西行夕.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD箱崎線北行朝.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD箱崎線北行夕.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD箱崎線南行朝.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD箱崎線南行夕.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD七隈線東行朝.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD七隈線東行夕.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD七隈線西行朝.pdf',
    'https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/MMDD七隈線西行夕.pdf',
    )


# 20200323の東行（北行）の朝のデータに基づく
# MediaBoxのサイズ
# ファイルごとにMediaBoxのサイズが異なるため，正規化するために用いる。

MediaBoxSize = {
        '空港線': { 'X': 1026.73, 'Y': 726},
        '箱崎線': { 'X': 990.49, 'Y': 700.38},
        '七隈線': { 'X': 1185.8, 'Y': 838.48}
        }

# 各凡例の左下のX座標，Y座標，幅及び高さ
# 20200323の東行（北行）の朝のデータに基づく
LegendXYWH = {
    '空港線': [
               (695.4, 570.7, 65.4, 14.8),
               (760.7, 570.7, 65.4, 14.8),
               (825.9, 570.7, 65.4, 14.8),
               (891.2, 570.7, 65.4, 14.8)
              ], 
    '箱崎線': [
               (613.7, 547.3, 54.8, 14.8),
               (668.3, 547.3, 54.8, 14.8),
               (722.9, 547.3, 54.8, 14.8),
               (777.6, 547.3, 68.5, 14.8)
              ],
    '七隈線': [
               (860.23, 674.34, 61.859, 14.704),
               (921.92, 674.34, 61.883, 14.704),  
               (983.64, 674.34, 61.859, 14.704),  
               (1045.33, 674.34, 61.859, 14.704)
              ]}


# 各セルの左下の座標
CellXYWH = {'空港線': [
                       [
                        (172.71, 471.88, 65.27, 29.29),
                        (237.98, 471.88, 65.26, 29.29),
                        (303.24, 471.88, 65.30, 29.29),
                        (368.54, 471.88, 65.26, 29.29),
                        (433.8, 471.88, 65.30, 29.29),
                        (499.10, 471.88, 65.27, 29.29),
                        (564.37, 471.88, 65.29, 29.29),
                        (629.66, 471.88, 65.27, 29.29),
                        (694.93, 471.88, 65.29, 29.29),
                        (760.22, 471.88, 65.27, 29.29),
                        (825.49, 471.88, 65.27, 29.29),
                        (890.76, 471.88, 65.29, 29.29)
                       ],
                       [
                        (172.71, 442.61, 65.27, 29.27),
                        (237.98, 442.61, 65.26, 29.27),
                        (303.24, 442.61, 65.30, 29.27),
                        (368.54, 442.61, 65.26, 29.27),
                        (433.8, 442.61, 65.30, 29.27),
                        (499.10, 442.61, 65.27, 29.27),
                        (564.37, 442.61, 65.29, 29.27),
                        (629.66, 442.61, 65.27, 29.27),
                        (694.93, 442.61, 65.29, 29.27),
                        (760.22, 442.61, 65.27, 29.27),
                        (825.49, 442.61, 65.27, 29.27),
                        (890.76, 442.61, 65.29, 29.27)
                       ],
                       [
                        (172.71, 413.34, 65.27, 29.27),
                        (237.98, 413.34, 65.26, 29.27),
                        (303.24, 413.34, 65.30, 29.27),
                        (368.54, 413.34, 65.26, 29.27),
                        (433.8, 413.34, 65.30, 29.27),
                        (499.10, 413.34, 65.27, 29.27),
                        (564.37, 413.34, 65.29, 29.27),
                        (629.66, 413.34, 65.27, 29.27),
                        (694.93, 413.34, 65.29, 29.27),
                        (760.22, 413.34, 65.27, 29.27),
                        (825.49, 413.34, 65.27, 29.27),
                        (890.76, 413.34, 65.29, 29.27)
                       ],
                       [
                        (172.71, 384.07, 65.27, 29.27),
                        (237.98, 384.07, 65.26, 29.27),
                        (303.24, 384.07, 65.30, 29.27),
                        (368.54, 384.07, 65.26, 29.27),
                        (433.8, 384.07, 65.30, 29.27),
                        (499.10, 384.07, 65.27, 29.27),
                        (564.37, 384.07, 65.29, 29.27),
                        (629.66, 384.07, 65.27, 29.27),
                        (694.93, 384.07, 65.29, 29.27),
                        (760.22, 384.07, 65.27, 29.27),
                        (825.49, 384.07, 65.27, 29.27),
                        (890.76, 384.07, 65.29, 29.27)
                       ],
                       [
                        (172.71, 354.78, 65.27, 29.29),
                        (237.98, 354.78, 65.26, 29.29),
                        (303.24, 354.78, 65.30, 29.29),
                        (368.54, 354.78, 65.26, 29.29),
                        (433.8, 354.78, 65.30, 29.29),
                        (499.10, 354.78, 65.27, 29.29),
                        (564.37, 354.78, 65.29, 29.29),
                        (629.66, 354.78, 65.27, 29.29),
                        (694.93, 354.78, 65.29, 29.29),
                        (760.22, 354.78, 65.27, 29.29),
                        (825.49, 354.78, 65.27, 29.29),
                        (890.76, 354.78, 65.29, 29.29)
                       ],
                       [
                        (172.71, 325.51, 65.27, 29.27),
                        (237.98, 325.51, 65.26, 29.27),
                        (303.24, 325.51, 65.30, 29.27),
                        (368.54, 325.51, 65.26, 29.27),
                        (433.8, 325.51, 65.30, 29.27),
                        (499.10, 325.51, 65.27, 29.27),
                        (564.37, 325.51, 65.29, 29.27),
                        (629.66, 325.51, 65.27, 29.27),
                        (694.93, 325.51, 65.29, 29.27),
                        (760.22, 325.51, 65.27, 29.27),
                        (825.49, 325.51, 65.27, 29.27),
                        (890.76, 325.51, 65.29, 29.27)
                       ],
                       [
                        (172.71, 296.24, 65.27, 29.27),
                        (237.98, 296.24, 65.26, 29.27),
                        (303.24, 296.24, 65.30, 29.27),
                        (368.54, 296.24, 65.26, 29.27),
                        (433.8, 296.24, 65.30, 29.27),
                        (499.10, 296.24, 65.27, 29.27),
                        (564.37, 296.24, 65.29, 29.27),
                        (629.66, 296.24, 65.27, 29.27),
                        (694.93, 296.24, 65.29, 29.27),
                        (760.22, 296.24, 65.27, 29.27),
                        (825.49, 296.24, 65.27, 29.27),
                        (890.76, 296.24, 65.29, 29.27)
                       ],
                       [
                        (172.71, 266.98, 65.27, 29.26),
                        (237.98, 266.98, 65.26, 29.26),
                        (303.24, 266.98, 65.30, 29.26),
                        (368.54, 266.98, 65.26, 29.26),
                        (433.8, 266.98, 65.30, 29.26),
                        (499.10, 266.98, 65.27, 29.26),
                        (564.37, 266.98, 65.29, 29.26),
                        (629.66, 266.98, 65.27, 29.26),
                        (694.93, 266.98, 65.29, 29.26),
                        (760.22, 266.98, 65.27, 29.26),
                        (825.49, 266.98, 65.27, 29.26),
                        (890.76, 266.98, 65.29, 29.26)
                       ],
                       [
                        (172.71, 237.68, 65.27, 29.30),
                        (237.98, 237.68, 65.26, 29.30),
                        (303.24, 237.68, 65.30, 29.30),
                        (368.54, 237.68, 65.26, 29.30),
                        (433.8, 237.68, 65.30, 29.30),
                        (499.10, 237.68, 65.27, 29.30),
                        (564.37, 237.68, 65.29, 29.30),
                        (629.66, 237.68, 65.27, 29.30),
                        (694.93, 237.68, 65.29, 29.30),
                        (760.22, 237.68, 65.27, 29.30),
                        (825.49, 237.68, 65.27, 29.30),
                        (890.76, 237.68, 65.29, 29.30)
                       ],
                       [
                        (172.71, 208.41, 65.27, 29.27),
                        (237.98, 208.41, 65.26, 29.27),
                        (303.24, 208.41, 65.30, 29.27),
                        (368.54, 208.41, 65.26, 29.27),
                        (433.8, 208.41, 65.30, 29.27),
                        (499.10, 208.41, 65.27, 29.27),
                        (564.37, 208.41, 65.29, 29.27),
                        (629.66, 208.41, 65.27, 29.27),
                        (694.93, 208.41, 65.29, 29.27),
                        (760.22, 208.41, 65.27, 29.27),
                        (825.49, 208.41, 65.27, 29.27),
                        (890.76, 208.41, 65.29, 29.27)
                       ],
                       [
                        (172.71, 179.2, 65.27, 29.3),
                        (237.98, 179.2, 65.26, 29.3),
                        (303.24, 179.2, 65.30, 29.3),
                        (368.54, 179.2, 65.26, 29.3),
                        (433.8, 179.2, 65.30, 29.3),
                        (499.10, 179.2, 65.27, 29.3),
                        (564.37, 179.2, 65.29, 29.3),
                        (629.66, 179.2, 65.27, 29.3),
                        (694.93, 179.2, 65.29, 29.3),
                        (760.22, 179.2, 65.27, 29.3),
                        (825.49, 179.2, 65.27, 29.3),
                        (890.76, 179.2, 65.29, 29.3)
                       ],
                       [
                        (172.71, 149.9, 65.27, 29.3),
                        (237.98, 149.9, 65.26, 29.3),
                        (303.24, 149.9, 65.30, 29.3),
                        (368.54, 149.9, 65.26, 29.3),
                        (433.8, 149.9, 65.30, 29.3),
                        (499.10, 149.9, 65.27, 29.3),
                        (564.37, 149.9, 65.29, 29.3),
                        (629.66, 149.9, 65.27, 29.3),
                        (694.93, 149.9, 65.29, 29.3),
                        (760.22, 149.9, 65.27, 29.3),
                        (825.49, 149.9, 65.27, 29.3),
                        (890.76, 149.9, 65.29, 29.3)
                       ],
                      ],
           '箱崎線': [
                       [
                        (169.29, 448.33, 116.07, 29.37),
                        (285.36, 448.33, 109.28, 29.37),
                        (394.64, 448.33, 109.29, 29.37),
                        (503.93, 448.33, 109.29, 29.37),
                        (613.22, 448.33, 109.3, 29.37),
                        (722.52, 448.33, 122.96, 29.37)
                       ],
                       [
                        (169.29, 418.96, 116.07, 29.38),
                        (285.36, 418.96, 109.28, 29.38),
                        (394.64, 418.96, 109.29, 29.38),
                        (503.93, 418.96, 109.29, 29.38),
                        (613.22, 418.96, 109.3, 29.38),
                        (722.52, 418.96, 122.96, 29.38)
                       ],
                       [
                        (169.29, 389.58, 116.07, 29.37),
                        (285.36, 389.58, 109.28, 29.37),
                        (394.64, 389.58, 109.29, 29.37),
                        (503.93, 389.58, 109.29, 29.37),
                        (613.22, 389.58, 109.3, 29.37),
                        (722.52, 389.58, 122.96, 29.37)
                       ],
                       [
                        (169.29, 360.21, 116.07, 29.36),
                        (285.36, 360.21, 109.28, 29.36),
                        (394.64, 360.21, 109.29, 29.36),
                        (503.93, 360.21, 109.29, 29.36),
                        (613.22, 360.21, 109.3, 29.36),
                        (722.52, 360.21, 122.96, 29.36)
                       ],
                       [
                        (169.29, 330.85, 116.07, 29.37),
                        (285.36, 330.85, 109.28, 29.37),
                        (394.64, 330.85, 109.29, 29.37),
                        (503.93, 330.85, 109.29, 29.37),
                        (613.22, 330.85, 109.3, 29.37),
                        (722.52, 330.85, 122.96, 29.37)
                       ],
                       [
                        (169.29, 301.48, 116.07, 29.39),
                        (285.36, 301.48, 109.28, 29.39),
                        (394.64, 301.48, 109.29, 29.39),
                        (503.93, 301.48, 109.29, 29.39),
                        (613.22, 301.48, 109.3, 29.39),
                        (722.52, 301.48, 122.96, 29.39)
                       ],
                       [
                        (169.29, 272.09, 116.07, 29.39),
                        (285.36, 272.09, 109.28, 29.39),
                        (394.64, 272.09, 109.29, 29.39),
                        (503.93, 272.09, 109.29, 29.39),
                        (613.22, 272.09, 109.3, 29.39),
                        (722.52, 272.09, 122.96, 29.39)
                       ],
                       [
                        (169.29, 242.73, 116.07, 29.36),
                        (285.36, 242.73, 109.28, 29.36),
                        (394.64, 242.73, 109.29, 29.36),
                        (503.93, 242.73, 109.29, 29.36),
                        (613.22, 242.73, 109.3, 29.36),
                        (722.52, 242.73, 122.96, 29.36)
                       ],
                       [
                        (169.29, 213.36, 116.07, 29.37),
                        (285.36, 213.36, 109.28, 29.37),
                        (394.64, 213.36, 109.29, 29.37),
                        (503.93, 213.36, 109.29, 29.37),
                        (613.22, 213.36, 109.3, 29.37),
                        (722.52, 213.36, 122.96, 29.37)
                       ],
                       [
                        (169.29, 183.98, 116.07, 29.38),
                        (285.36, 183.98, 109.28, 29.38),
                        (394.64, 183.98, 109.29, 29.38),
                        (503.93, 183.98, 109.29, 29.38),
                        (613.22, 183.98, 109.3, 29.38),
                        (722.52, 183.98, 122.96, 29.38)
                       ],
                       [
                        (169.29, 154.61, 116.07, 29.37),
                        (285.36, 154.61, 109.28, 29.37),
                        (394.64, 154.61, 109.29, 29.37),
                        (503.93, 154.61, 109.29, 29.37),
                        (613.22, 154.61, 109.3, 29.37),
                        (722.52, 154.61, 122.96, 29.37)
                       ],
                       [
                        (169.29, 125.25, 116.07, 29.36),
                        (285.36, 125.25, 109.28, 29.36),
                        (394.64, 125.25, 109.29, 29.36),
                        (503.93, 125.25, 109.29, 29.36),
                        (613.22, 125.25, 109.3, 29.36),
                        (722.52, 125.25, 122.96, 29.36)
                       ]
                     ],
            '七隈線': [
                       [
                        (181.21, 566.66, 61.71, 38.87),
                        (242.92, 566.66, 61.69, 38.87),
                        (304.61, 566.66, 61.69, 38.87),
                        (366.30, 566.66, 61.72, 38.87),
                        (428.02, 566.66, 61.69, 38.87),
                        (489.71, 566.66, 61.69, 38.87),
                        (551.40, 566.66, 61.71, 38.87),
                        (613.11, 566.66, 61.69, 38.87),
                        (674.80, 566.66, 61.69, 38.87),
                        (736.49, 566.66, 61.72, 38.87),
                        (798.21, 566.66, 61.69, 38.87),
                        (859.90, 566.66, 61.69, 38.87),
                        (921.59, 566.66, 61.71, 38.87),
                        (983.30, 566.66, 61.69, 38.87),
                        (1044.99, 566.66, 61.7, 38.87)
                       ],
                       [
                        (181.21, 527.76, 61.71, 38.9),
                        (242.92, 527.76, 61.69, 38.9),
                        (304.61, 527.76, 61.69, 38.9),
                        (366.30, 527.76, 61.72, 38.9),
                        (428.02, 527.76, 61.69, 38.9),
                        (489.71, 527.76, 61.69, 38.9),
                        (551.40, 527.76, 61.71, 38.9),
                        (613.11, 527.76, 61.69, 38.9),
                        (674.80, 527.76, 61.69, 38.9),
                        (736.49, 527.76, 61.72, 38.9),
                        (798.21, 527.76, 61.69, 38.9),
                        (859.90, 527.76, 61.7, 38.9),
                        (921.59, 527.76, 61.71, 38.9),
                        (983.30, 527.76, 61.69, 38.9),
                        (1044.99, 527.76, 61.7, 38.9)
                       ],
                       [
                        (181.21, 488.89, 61.71, 38.87),
                        (242.92, 488.89, 61.69, 38.87),
                        (304.61, 488.89, 61.69, 38.87),
                        (366.30, 488.89, 61.72, 38.87),
                        (428.02, 488.89, 61.69, 38.87),
                        (489.71, 488.89, 61.69, 38.87),
                        (551.40, 488.89, 61.71, 38.87),
                        (613.11, 488.89, 61.69, 38.87),
                        (674.80, 488.89, 61.69, 38.87),
                        (736.49, 488.89, 61.72, 38.87),
                        (798.21, 488.89, 61.69, 38.87),
                        (859.90, 488.89, 61.69, 38.87),
                        (921.59, 488.89, 61.71, 38.87),
                        (983.30, 488.89, 61.69, 38.87),
                        (1044.99, 488.89, 61.7, 38.87)
                       ],
                       [
                        (181.21, 450.01, 61.71, 38.88),
                        (242.92, 450.01, 61.69, 38.88),
                        (304.61, 450.01, 61.69, 38.88),
                        (366.30, 450.01, 61.72, 38.88),
                        (428.02, 450.01, 61.69, 38.88),
                        (489.71, 450.01, 61.69, 38.88),
                        (551.40, 450.01, 61.71, 38.88),
                        (613.11, 450.01, 61.69, 38.88),
                        (674.80, 450.01, 61.69, 38.88),
                        (736.49, 450.01, 61.72, 38.88),
                        (798.21, 450.01, 61.69, 38.88),
                        (859.90, 450.01, 61.69, 38.88),
                        (921.59, 450.01, 61.71, 38.88),
                        (983.30, 450.01, 61.69, 38.88),
                        (1044.99, 450.01, 61.7, 38.88)
                       ],
                       [
                        (181.21, 411.11, 61.71, 38.9),
                        (242.92, 411.11, 61.69, 38.9),
                        (304.61, 411.11, 61.69, 38.9),
                        (366.30, 411.11, 61.72, 38.9),
                        (428.02, 411.11, 61.69, 38.9),
                        (489.71, 411.11, 61.69, 38.9),
                        (551.40, 411.11, 61.71, 38.9),
                        (613.11, 411.11, 61.69, 38.9),
                        (674.80, 411.11, 61.69, 38.9),
                        (736.49, 411.11, 61.72, 38.9),
                        (798.21, 411.11, 61.69, 38.9),
                        (859.90, 411.11, 61.69, 38.9),
                        (921.59, 411.11, 61.71, 38.9),
                        (983.30, 411.11, 61.69, 38.9),
                        (1044.99, 411.11, 61.7, 38.9)
                       ],
                       [
                        (181.21, 372.24, 61.71, 38.87),
                        (242.92, 372.24, 61.69, 38.87),
                        (304.61, 372.24, 61.69, 38.87),
                        (366.30, 372.24, 61.72, 38.87),
                        (428.02, 372.24, 61.69, 38.87),
                        (489.71, 372.24, 61.69, 38.87),
                        (551.40, 372.24, 61.71, 38.87),
                        (613.11, 372.24, 61.69, 38.87),
                        (674.80, 372.24, 61.69, 38.87),
                        (736.49, 372.24, 61.72, 38.87),
                        (798.21, 372.24, 61.69, 38.87),
                        (859.90, 372.24, 61.69, 38.87),
                        (921.59, 372.24, 61.71, 38.87),
                        (983.30, 372.24, 61.69, 38.87),
                        (1044.99, 372.24, 61.7, 38.87)
                       ],
                       [
                        (181.21, 333.37, 61.71, 38.87),
                        (242.92, 333.37, 61.69, 38.87),
                        (304.61, 333.37, 61.69, 38.87),
                        (366.30, 333.37, 61.72, 38.87),
                        (428.02, 333.37, 61.69, 38.87),
                        (489.71, 333.37, 61.69, 38.87),
                        (551.40, 333.37, 61.71, 38.87),
                        (613.11, 333.37, 61.69, 38.87),
                        (674.80, 333.37, 61.69, 38.87),
                        (736.49, 333.37, 61.72, 38.87),
                        (798.21, 333.37, 61.69, 38.87),
                        (859.90, 333.37, 61.69, 38.87),
                        (921.59, 333.37, 61.71, 38.87),
                        (983.30, 333.37, 61.69, 38.87),
                        (1044.99, 333.37, 61.7, 38.87)
                       ],
                       [
                        (181.21, 294.47, 61.71, 38.9),
                        (242.92, 294.47, 61.69, 38.9),
                        (304.61, 294.47, 61.69, 38.9),
                        (366.30, 294.47, 61.72, 38.9),
                        (428.02, 294.47, 61.69, 38.9),
                        (489.71, 294.47, 61.69, 38.9),
                        (551.40, 294.47, 61.71, 38.9),
                        (613.11, 294.47, 61.69, 38.9),
                        (674.80, 294.47, 61.69, 38.9),
                        (736.49, 294.47, 61.72, 38.9),
                        (798.21, 294.47, 61.69, 38.9),
                        (859.90, 294.47, 61.69, 38.9),
                        (921.59, 294.47, 61.71, 38.9),
                        (983.30, 294.47, 61.69, 38.9),
                        (1044.99, 294.47, 61.7, 38.9)
                       ],
                       [
                        (181.21, 255.6, 61.71, 38.87),
                        (242.92, 255.6, 61.69, 38.87),
                        (304.61, 255.6, 61.69, 38.87),
                        (366.30, 255.6, 61.72, 38.87),
                        (428.02, 255.6, 61.69, 38.87),
                        (489.71, 255.6, 61.69, 38.87),
                        (551.40, 255.6, 61.71, 38.87),
                        (613.11, 255.6, 61.69, 38.87),
                        (674.80, 255.6, 61.69, 38.87),
                        (736.49, 255.6, 61.72, 38.87),
                        (798.21, 255.6, 61.69, 38.87),
                        (859.90, 255.6, 61.69, 38.87),
                        (921.59, 255.6, 61.71, 38.87),
                        (983.30, 255.6, 61.69, 38.87),
                        (1044.99, 255.6, 61.7, 38.87)
                       ],
                       [
                        (181.21, 216.72, 61.71, 38.88),
                        (242.92, 216.72, 61.69, 38.88),
                        (304.61, 216.72, 61.69, 38.88),
                        (366.30, 216.72, 61.72, 38.88),
                        (428.02, 216.72, 61.69, 38.88),
                        (489.71, 216.72, 61.69, 38.88),
                        (551.40, 216.72, 61.71, 38.88),
                        (613.11, 216.72, 61.69, 38.88),
                        (674.80, 216.72, 61.69, 38.88),
                        (736.49, 216.72, 61.72, 38.88),
                        (798.21, 216.72, 61.69, 38.88),
                        (859.90, 216.72, 61.69, 38.88),
                        (921.59, 216.72, 61.71, 38.88),
                        (983.30, 216.72, 61.69, 38.88),
                        (1044.99, 216.72, 61.7, 38.88)
                       ],
                       [
                        (181.21, 177.85, 61.71, 38.87),
                        (242.92, 177.85, 61.69, 38.87),
                        (304.61, 177.85, 61.69, 38.87),
                        (366.30, 177.85, 61.72, 38.87),
                        (428.02, 177.85, 61.69, 38.87),
                        (489.71, 177.85, 61.69, 38.87),
                        (551.40, 177.85, 61.71, 38.87),
                        (613.11, 177.85, 61.69, 38.87),
                        (674.80, 177.85, 61.69, 38.87),
                        (736.49, 177.85, 61.72, 38.87),
                        (798.21, 177.85, 61.69, 38.87),
                        (859.90, 177.85, 61.69, 38.87),
                        (921.59, 177.85, 61.71, 38.87),
                        (983.30, 177.85, 61.69, 38.87),
                        (1044.99, 177.85, 61.7, 38.87)
                       ],
                       [
                        (181.21, 138.875, 61.71, 38.9),
                        (242.92, 138.95, 61.69, 38.9),
                        (304.61, 138.95, 61.69, 38.9),
                        (366.30, 138.95, 61.72, 38.9),
                        (428.02, 138.95, 61.69, 38.9),
                        (489.71, 138.95, 61.69, 38.9),
                        (551.40, 138.95, 61.71, 38.9),
                        (613.11, 138.95, 61.69, 38.9),
                        (674.80, 138.95, 61.69, 38.9),
                        (736.49, 138.95, 61.72, 38.9),
                        (798.21, 138.95, 61.69, 38.9),
                        (859.90, 138.95, 61.69, 38.9),
                        (921.59, 138.95, 61.71, 38.9),
                        (983.30, 138.95, 61.69, 38.9),
                        (1044.99, 138.95, 61.7, 38.9)
                       ]
                      ]}



# 出力するCSVファイルのヘッダ
CSVHyoutou = {
        '空港線': {
            '東行': ['月日','路線','方面','時間帯','姪浜～室見','室見～藤崎','藤崎～西新','西新～唐人町','唐人町～大濠公園','大濠公園～赤坂','赤坂～天神','天神～中洲川端','中洲川端～祇園','祇園～博多','博多～東比恵','東比恵～福岡空港'],
            '西行': ['月日','路線','方面','時間帯','福岡空港～東比恵','東比恵～博多','博多～祇園','祇園～中洲川端','中洲川端～天神','天神～赤坂','赤坂～大濠公園','大濠公園～唐人町','唐人町～西新','西新～藤崎','藤崎～室見','室見～姪浜']
            },
        '箱崎線': {
            '北行': ['月日','路線','方面','時間帯','中洲川端～呉服町','呉服町～千代県庁口','千代県庁口～馬出九大病院前','馬出九大病院前～箱崎宮前','箱崎宮前～箱崎九大前','箱崎九大前～貝塚'],
            '南行': ['月日','路線','方面','時間帯','貝塚～箱崎九大前','箱崎九大前～箱崎宮前','箱崎宮前～馬出九大病院前','馬出九大病院前～千代県庁口','千代県庁口～呉服町','呉服町～中洲川端']
            },
        '七隈線': {
            '東行': ['月日','路線','方面','時間帯','橋本～次郎丸','次郎丸～賀茂','賀茂～野芥','野芥～梅林','梅林～福大前','福大前～七隈','七隈～金山','金山～茶山','茶山～別府','別府～六本松','六本松～桜坂','桜坂～薬院大通','薬院大通～薬院','薬院～渡辺通','渡辺通～天神南'],
            '西行': ['月日','路線','方面','時間帯','天神南～渡辺通','渡辺通～薬院','薬院～薬院大通','薬院大通～桜坂','桜坂～六本松','六本松～別府','別府～茶山','茶山～金山','金山～七隈','七隈～福大前','福大前～梅林','梅林～野芥','野芥～賀茂','賀茂～次郎丸','次郎丸～橋本']
            }
        }



CSVHyousoku = {
    '朝': ['7:00～7:15','7:15～7:30','7:30～7:45','7:45～8:00','8:00～8:15','8:15～8:30','8:30～8:45','8:45～9:00','9:00～9:15','9:15～9:30','9:30～9:45','9:45～10:00'],
    '夕': ['16:00～16:15','16:15～16:30','16:30～16:45','16:45～17:00','17:00～17:15','17:15～17:30','17:30～17:45','17:45～18:00','18:00～18:15','18:15～18:30','18:30～18:45','18:45～19:00']
    }

def near2(xy1, xy2, c=0.044):
    '''
    与えられた２つのX,Yの組の値が近ければTrueを、そうでなければFalseを返す。
    近いかどうかの判断は、デフォルトではX座標，Y座標共に5%以内。
    '''
    x = abs((float(xy1[0])-float(xy2[0]))/float(xy2[0])) 
    y = abs((float(xy1[1])-float(xy2[1]))/float(xy2[1])) 
    if x < c and y < c:
        #print('X={}%, Y={}%'.format(x*100, y*100))
        return True
    else:
        #print('x={}%, y={}%'.format(x*100, y*100))
        return False

def near4(xywh1, xywh2, c=0.044):
    '''
    与えられた２つのX,Y,W,Hの組の値が近ければTrueを、そうでなければFalseを返す。
    近いかどうかの判断は、デフォルトではX座標，Y座標共に5%以内。
    '''
    if abs((float(xywh1[0])-float(xywh2[0]))/float(xywh2[0])) < c \
       and abs((float(xywh1[1])-float(xywh2[1]))/float(xywh2[1])) < c \
       and abs((float(xywh2[2])-float(xywh2[2]))/float(xywh2[2])) < c \
       and abs((float(xywh2[3])-float(xywh2[3]))/float(xywh2[3])) < c:
        return True
    else:
        return False


def dayRosenHoumenTime(url):
    localfilename = url.replace('https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/', '')
    return localfilename[0:4], localfilename[4:7], localfilename[7:9], localfilename[9]

def download(url):
    localfilename = "PDF/"+url.replace('https://subway.city.fukuoka.lg.jp/subway_webapp/files/uploads/', '')
    with urllib.request.urlopen(urllib.parse.quote(url).replace('https%3A//','https://')) as u:
        with open(localfilename, mode="wb") as f:
            f.write(u.read())
            return localfilename


def aggregateImages(PDFReader, L1234):
    '''
    同じ色のセルでも、PDF内部では別のImageを用いている場合があるので、それらを集約する。
    返り値のIは，以下のような感じ。
    この例の場合、Image7,Image9,Image11,Image13が凡例で使われているもので，
    Image20,Image22,Image26,Image33は，実際のデータ部分のセルで使われているImage。

    I={'Image7': 'Image7', 
       'Image9': 'Image9', 
       'Image11': 'Image11', 
       'Image13': 'Image13', 
       'Image20': 'Image9', 
       'Image22': 'Image11', 
       'Image26': 'Image7', 
       'Image33': 'Image13'
   }
    '''

    I = {}

    Images = PDFReader.pages[0].Resources.XObject
    for image in Images:
        for i in L1234:
            if Images[image].stream == Images['/'+i].stream:
                #I1234[i].append(image.strip('/'))
                I[image.strip('/')] = i

    #print('return I1234 = {}'.format(I1234))
    #print('return I = {}'.format(I))
    #return I1234
    return I





def parse(file, rosen, houmen):
    with open(f, "rb") as fp:
        PDFReader = PdfReader(fp, decompress=True)
        #print('ContentsStream='+str(ContentsStream))

        #  凡例として使われているパターンを取得する。
        L1234 = getLegendPattern(PDFReader, rosen)
        #print('L1234='+str(L1234))

        images = aggregateImages(PDFReader, L1234)
        #print('images='+str(images))

        # ContentsStreamに含まれる各長方形(re)について、どのセルに該当するかをチェックする。
        cells = checkEachRectangles(PDFReader, rosen, houmen, L1234, images)
        #print('cells='+str(cells))
        #cells=''


        return cells
   

def getLegendPattern(PDFReader, rosen):
    '''
    凡例は「空いている」から「とても混んでいる」までの５段階あるが、それらのうち、
　　２番目から５番目のセルで使われている４つのパターン（「P6」など）をリストとして返す。

    
    ContentStreamの中で，長方形は，
    /Pattern cs /P○○ scn
    X座標 Y座標 幅 高さ
    という形式で現れる。
　　ここで，P○○は使用されるパターンの名前。

    よって，各長方形について，このX座標，Y座標，幅，高さを読み取り，予め定義している凡例枠のどれにマッチするかを評価すれば良い。
    なお，ファイルごとにMediaBoxのサイズが異なるため，幅，高さをそれぞれMediaBoxの幅，高さで割って正規化している。
    '''

    MediaBoxW = PDFReader.pages[0].MediaBox[2]
    MediaBoxH = PDFReader.pages[0].MediaBox[3]
    ContentsStream = PDFReader.pages[0].Contents.stream
    patterns = re.findall(r'/Pattern cs /P[0-9]*? scn\r\n[0-9.]*? [0-9.]*? [0-9.]*? [0-9.]*? re', ContentsStream) 
    #print('matched='+str(patterns))
    L = [0,0,0,0]
    for pattern in patterns:
        #print('pattern string='+pattern)
        p = re.compile(r'/Pattern cs /(P[0-9]*?) scn\r\n([0-9.]*?) ([0-9.]*?) ([0-9.]*?) ([0-9.]*?) re')
        m = p.match(pattern)
        P, x, y, w, h = m.groups()
        xN = float(x)/float(MediaBoxW)
        yN = float(y)/float(MediaBoxH)
        wN = float(w)/float(MediaBoxW)
        hN = float(h)/float(MediaBoxH)
        #print('P={}, x={}, y={}, w={}, h={}'.format(P,x,y,w,h))

        '''
        x及びyがLegendXYのいずれのかのX座標及びY座標にマッチし，
        かつ，w及びhがLegendSizeのいずれかの幅及び高さにマッチした場合は，
        そのときのPが，その凡例で使われているパターンである。
        '''

        for lx,ly,lw,lh in LegendXYWH[rosen]:
            #print('P={}, x={}, lx={}, y={}, ly={}, w={}, lw={}, h={}, lh={}'.format(P,x,lx,y,lw,w,lw,h,lh))
            lxN = lx / MediaBoxSize[rosen]['X']
            lyN = ly / MediaBoxSize[rosen]['Y']
            lwN = lw / MediaBoxSize[rosen]['X']
            lhN = lh / MediaBoxSize[rosen]['Y']
            if near4((xN,yN,wN,hN),(lxN,lyN,lwN,lhN)):
                #print('matched! x={}, lx={}, y={}, ly={}, w={}, lw={}, h={}, lh={}'.format(x,lx,y,ly,w,lw,h,lh))
                m = re.match(r'.*cm/(Image.*?) .*', PDFReader.pages[0].Resources.Pattern['/'+P].stream)
                L[LegendXYWH[rosen].index((lx,ly,lw,lh))] = m.groups(1)[0]

    return L


def checkEachRectangles(PDFReader, rosen, houmen, L1234, images):
    MediaBoxW = PDFReader.pages[0].MediaBox[2]
    MediaBoxH = PDFReader.pages[0].MediaBox[3]
    ContentsStream = PDFReader.pages[0].Contents.stream
    patterns = re.findall(r'/Pattern cs /P[0-9]*? scn\r\n[0-9.]*? [0-9.]*? [0-9.]*? [0-9.]*? re', ContentsStream) 
    C = [[0] * len(CellXYWH[rosen][0]) for i in range(len(CellXYWH[rosen]))]
    #print('C is initialized to', end='')
    #print(C)
    # 次の行でreversedしているのは、以下の理由による。
    # 20200323空港線東行朝の7:45〜8:00の唐人町〜天神までのデータのように、一つのセルが高さの低い長方形２段から構成されている場合がある。
    # この際、２段のうちの上の段の方が、一行上の正しいセルと近接しているため、一行上の情報を上書きしてしまうことがある。
    # これを避けるために、上の方から順にではなく、下の方から順に処理するようにした。
    # （ただしこれは、PDFファイル上、各長方形が出現する順序が、上の方からであるという前提に基づいている。）
    for pattern in reversed(patterns):
        p = re.compile(r'/Pattern cs /(P[0-9]*?) scn\r\n([0-9.]*?) ([0-9.]*?) ([0-9.]*?) ([0-9.]*?) re')
        #print()
        #print('pattern='+str(pattern))
        m = p.match(pattern)
        P, rx, ry, rw, rh = m.groups()
        rxN = float(rx)/float(MediaBoxW)
        ryN = float(ry)/float(MediaBoxH)
        rwN = float(rw)/float(MediaBoxW)
        rhN = float(rh)/float(MediaBoxH)
        #print('P={}, rx={}, ry={}, rw={}, rh={}'.format(P,rx,ry,rw,rh))

        for cellY in CellXYWH[rosen]:
            #print('cellY=', end='')
            #print(cellY)
            CY=CellXYWH[rosen].index(cellY)
            for cellXY in cellY:
                #print('cellXY=', end='')
                #print(cellXY)
                #print('路線:'+rosen+' 方面:'+houmen+' Y='+str(CY)+' X='+str(cellY.index(cellXY)))
                cx, cy, cw, ch = cellXY[0], cellXY[1], cellXY[2], cellXY[3]
                cxN = cx / MediaBoxSize[rosen]['X']
                cyN = cy / MediaBoxSize[rosen]['Y']
                cwN = cw / MediaBoxSize[rosen]['X']
                chN = ch / MediaBoxSize[rosen]['Y']
                #print('cx={}, cy={}, cw={}, ch={}'.format(cx,cy,cw,ch))
                #print()
                #print('rx={}, cx={},  ry={}, cy={},  rw={}, cw={},  rh={}, ch={}'.format(rx,cx,ry,cy,rw,cw,rh,ch))
                #print('rxN={}, cxN={},  ryN={}, cyN={},  rwN={}, cwN={}, rhN={}, chN={}'.format(rxN,cxN,ryN,cyN,rwN,cwN,rhN,chN))
                if near2((rxN,ryN),(cxN,cyN)):
                    #print('XYnear! rx={}, cx={},  ry={}, cy={},  rw={}, cw={},  rh={}, ch={}'.format(rx,cx,ry,cy,rw,cw,rh,ch))
                    # 長方形はいくつかのセルをまたがる場合があるため，・・・
                    # 現在のセルから右上端のセルまで
                    # 幅を足していき，現在の長方形の幅と一致するかを確認する。
                    tmpH = chN
                    for tmpY in range(CellXYWH[rosen].index(cellY), -1, -1):
                        tmpW = cwN
                        for tmpX in range(cellY.index(cellXY), len(cellY)):
                            #print('tmpY='+str(tmpY)+' tmpX='+str(tmpX))
                            #print('tmpH='+str(tmpH)+' tmpW='+str(tmpW))
                            #print('rx={}, cx={},  ry={}, cy={},  rw={}, cw={},  rh={}, ch={}'.format(rx,cx,ry,cy,rw,cw,rh,ch))
                            #print('rxN={}, cxN={},  ryN={}, cyN={},  rwN={}, cwN={}, tmpW={},  rhN={}, chN={}, tmpH={}'.format(rxN,cxN,ryN,cyN,rwN,cwN,tmpW,rhN,chN,tmpH))
                            # 次の行でrh*2しているのは、一つのセルがその高さの半分の長方形２つで塗られている場合があるため。
                            if near2((rwN,rhN),(tmpW,tmpH)) or near2((rwN,str(float(rhN)*2)),(tmpW,tmpH)):
                                #print('matched! rx={}, cx={},  ry={}, cy={},  rw={}, cw={},  rh={}, ch={}'.format(rx,cx,ry,cy,rw,cw,rh,ch))
                                # 該当する、凡例で使われているImageXXを算出する。
                                #print('P='+str(P))
                                m = re.match(r'.*cm/(Image.*?) .*', PDFReader.pages[0].Resources.Pattern['/'+P].stream)
                                #print(m)
                                #print(m.groups(1)[0])
                                #print('index='+str(images[m.groups(1)[0]]))
                                ImageXX = L1234.index(images[m.groups(1)[0]])+1
                                #print('ImageXX='+str(ImageXX))
    
                                #print(range(CellXYWH[rosen].index(cellY), tmpY-1))
                                for i in range(CellXYWH[rosen].index(cellY), tmpY-1, -1):
                                    #print(range(cellY.index(cellXY), tmpX+1))
                                    for j in range(cellY.index(cellXY), tmpX+1):
                                        #print('i='+str(i)+' j='+str(j)+' Image='+str(ImageXX))
                                        C[i][j] = ImageXX
                                        #print(C)
                                break
                            tmpW = tmpW + cellY[tmpX][2] / MediaBoxSize[rosen]['X']

                        else:
                            tmpH = tmpH + CellXYWH[rosen][tmpY][tmpX][3] / MediaBoxSize[rosen]['Y']
                            continue
                        break
                    else:
                        continue
                    break


    return C

def output(cells, day, rosen, houmen, time):
    outputFileName = "CSV/"+day+rosen+houmen+time+'.csv'
    #print(outputFileName)
    with open(outputFileName, mode='w') as f:
        for x in range(len(CSVHyoutou[rosen][houmen])):
            #print(CSVHyoutou[rosen][houmen][x]+',', end='')
            f.write(CSVHyoutou[rosen][houmen][x]+',')
        f.write('\n')
        for y in range(len(cells)):
            #print(day+','+rosen+','+houmen+','+CSVHyousoku[time][y]+',', end='')
            f.write(day+','+rosen+','+houmen+','+CSVHyousoku[time][y]+',')
            for x in range(len(cells[y])):
                f.write(str(cells[y][x]))
                f.write(',')
            f.write('\n')

parser = argparse.ArgumentParser()
parser.add_argument('day', help='target day', nargs='?', default='0000')
args = parser.parse_args()

if args.day == '0000':
    yesterday = datetime.today() - timedelta(days=1)
    MonthDay = datetime.strftime(yesterday, '%m%d')
else:
    MonthDay = args.day


for url in urls:
    yesterdayURL=url.replace('MMDD', MonthDay)
    day, rosen, houmen, time  = dayRosenHoumenTime(yesterdayURL)
    #print('day='+day+' rosen='+rosen+' houmen='+houmen+ ' time='+time)
    f = download(yesterdayURL)
    cells = parse(f, rosen, houmen)
    output(cells, day, rosen, houmen, time)
